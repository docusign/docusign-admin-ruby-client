=begin
#DocuSign Admin API

#An API for an organization administrator to manage organizations, accounts and users

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_Admin
  class UserDrilldownResponse
    attr_accessor :id

    attr_accessor :site_id

    attr_accessor :site_name

    attr_accessor :user_name

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :user_status

    attr_accessor :default_account_id

    attr_accessor :default_account_name

    attr_accessor :language_culture

    attr_accessor :selected_languages

    attr_accessor :federated_status

    attr_accessor :is_organization_admin

    attr_accessor :created_on

    attr_accessor :last_login

    attr_accessor :memberships

    attr_accessor :identities

    attr_accessor :device_verification_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'site_id' => :'site_id',
        :'site_name' => :'site_name',
        :'user_name' => :'user_name',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'user_status' => :'user_status',
        :'default_account_id' => :'default_account_id',
        :'default_account_name' => :'default_account_name',
        :'language_culture' => :'language_culture',
        :'selected_languages' => :'selected_languages',
        :'federated_status' => :'federated_status',
        :'is_organization_admin' => :'is_organization_admin',
        :'created_on' => :'created_on',
        :'last_login' => :'last_login',
        :'memberships' => :'memberships',
        :'identities' => :'identities',
        :'device_verification_enabled' => :'device_verification_enabled'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'site_id' => :'Integer',
        :'site_name' => :'String',
        :'user_name' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'user_status' => :'String',
        :'default_account_id' => :'String',
        :'default_account_name' => :'String',
        :'language_culture' => :'String',
        :'selected_languages' => :'String',
        :'federated_status' => :'String',
        :'is_organization_admin' => :'BOOLEAN',
        :'created_on' => :'DateTime',
        :'last_login' => :'DateTime',
        :'memberships' => :'Array<MembershipResponse>',
        :'identities' => :'Array<UserIdentityResponse>',
        :'device_verification_enabled' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'site_id')
        self.site_id = attributes[:'site_id']
      end

      if attributes.has_key?(:'site_name')
        self.site_name = attributes[:'site_name']
      end

      if attributes.has_key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.has_key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.has_key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.has_key?(:'user_status')
        self.user_status = attributes[:'user_status']
      end

      if attributes.has_key?(:'default_account_id')
        self.default_account_id = attributes[:'default_account_id']
      end

      if attributes.has_key?(:'default_account_name')
        self.default_account_name = attributes[:'default_account_name']
      end

      if attributes.has_key?(:'language_culture')
        self.language_culture = attributes[:'language_culture']
      end

      if attributes.has_key?(:'selected_languages')
        self.selected_languages = attributes[:'selected_languages']
      end

      if attributes.has_key?(:'federated_status')
        self.federated_status = attributes[:'federated_status']
      end

      if attributes.has_key?(:'is_organization_admin')
        self.is_organization_admin = attributes[:'is_organization_admin']
      end

      if attributes.has_key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.has_key?(:'last_login')
        self.last_login = attributes[:'last_login']
      end

      if attributes.has_key?(:'memberships')
        if (value = attributes[:'memberships']).is_a?(Array)
          self.memberships = value
        end
      end

      if attributes.has_key?(:'identities')
        if (value = attributes[:'identities']).is_a?(Array)
          self.identities = value
        end
      end

      if attributes.has_key?(:'device_verification_enabled')
        self.device_verification_enabled = attributes[:'device_verification_enabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          site_id == o.site_id &&
          site_name == o.site_name &&
          user_name == o.user_name &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          user_status == o.user_status &&
          default_account_id == o.default_account_id &&
          default_account_name == o.default_account_name &&
          language_culture == o.language_culture &&
          selected_languages == o.selected_languages &&
          federated_status == o.federated_status &&
          is_organization_admin == o.is_organization_admin &&
          created_on == o.created_on &&
          last_login == o.last_login &&
          memberships == o.memberships &&
          identities == o.identities &&
          device_verification_enabled == o.device_verification_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, site_id, site_name, user_name, first_name, last_name, user_status, default_account_id, default_account_name, language_culture, selected_languages, federated_status, is_organization_admin, created_on, last_login, memberships, identities, device_verification_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_Admin.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
