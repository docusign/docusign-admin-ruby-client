=begin
#Docusign Admin API

#An API for an organization administrator to manage organizations, accounts and users

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_Admin
  class SubscriptionProvisionModelAssetGroupWork
    attr_accessor :asset_group_work_id

    attr_accessor :asset_group_id

    attr_accessor :asset_group_work_type

    attr_accessor :status

    attr_accessor :order_id

    attr_accessor :target_account_id

    attr_accessor :source_account_id

    attr_accessor :source_account_external_id

    attr_accessor :source_account_name

    attr_accessor :source_account_site

    attr_accessor :clone_request_id

    attr_accessor :clone_account_details

    attr_accessor :create_sub_account_details

    attr_accessor :attempts

    attr_accessor :retry_on

    attr_accessor :message

    attr_accessor :created_by_name

    attr_accessor :created_by_email

    attr_accessor :error_details

    attr_accessor :old_asset_group_subscription_id

    attr_accessor :new_asset_group_subscription_id

    attr_accessor :source_system

    attr_accessor :source_id

    attr_accessor :created_by

    # 0 stands for Application, 1 stands for User, 2 stands for Generic, 3 stands for RestAPIAuth, 4 stands for Resource, 5 stands for Restricted
    attr_accessor :created_by_type

    attr_accessor :created_date

    attr_accessor :updated_by

    # 0 stands for Application, 1 stands for User, 2 stands for Generic, 3 stands for RestAPIAuth, 4 stands for Resource, 5 stands for Restricted
    attr_accessor :updated_by_type

    attr_accessor :updated_date

    attr_accessor :update_history

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asset_group_work_id' => :'AssetGroupWorkId',
        :'asset_group_id' => :'AssetGroupId',
        :'asset_group_work_type' => :'AssetGroupWorkType',
        :'status' => :'Status',
        :'order_id' => :'OrderId',
        :'target_account_id' => :'TargetAccountId',
        :'source_account_id' => :'SourceAccountId',
        :'source_account_external_id' => :'SourceAccountExternalId',
        :'source_account_name' => :'SourceAccountName',
        :'source_account_site' => :'SourceAccountSite',
        :'clone_request_id' => :'CloneRequestId',
        :'clone_account_details' => :'CloneAccountDetails',
        :'create_sub_account_details' => :'CreateSubAccountDetails',
        :'attempts' => :'Attempts',
        :'retry_on' => :'RetryOn',
        :'message' => :'Message',
        :'created_by_name' => :'CreatedByName',
        :'created_by_email' => :'CreatedByEmail',
        :'error_details' => :'ErrorDetails',
        :'old_asset_group_subscription_id' => :'OldAssetGroupSubscriptionId',
        :'new_asset_group_subscription_id' => :'NewAssetGroupSubscriptionId',
        :'source_system' => :'SourceSystem',
        :'source_id' => :'SourceId',
        :'created_by' => :'CreatedBy',
        :'created_by_type' => :'CreatedByType',
        :'created_date' => :'CreatedDate',
        :'updated_by' => :'UpdatedBy',
        :'updated_by_type' => :'UpdatedByType',
        :'updated_date' => :'UpdatedDate',
        :'update_history' => :'UpdateHistory'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'asset_group_work_id' => :'String',
        :'asset_group_id' => :'String',
        :'asset_group_work_type' => :'String',
        :'status' => :'String',
        :'order_id' => :'String',
        :'target_account_id' => :'String',
        :'source_account_id' => :'String',
        :'source_account_external_id' => :'Integer',
        :'source_account_name' => :'String',
        :'source_account_site' => :'String',
        :'clone_request_id' => :'String',
        :'clone_account_details' => :'SubscriptionProvisionModelAccountCreateCreateAccountDetails',
        :'create_sub_account_details' => :'SubscriptionProvisionModelAccountCreateCreateSubAccountDetails',
        :'attempts' => :'Integer',
        :'retry_on' => :'DateTime',
        :'message' => :'String',
        :'created_by_name' => :'String',
        :'created_by_email' => :'String',
        :'error_details' => :'SubscriptionProvisionModelServiceErrorDetails',
        :'old_asset_group_subscription_id' => :'String',
        :'new_asset_group_subscription_id' => :'String',
        :'source_system' => :'String',
        :'source_id' => :'String',
        :'created_by' => :'String',
        :'created_by_type' => :'Integer',
        :'created_date' => :'DateTime',
        :'updated_by' => :'String',
        :'updated_by_type' => :'Integer',
        :'updated_date' => :'DateTime',
        :'update_history' => :'Array<SubscriptionProvisionModelChangeEvent>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'AssetGroupWorkId')
        self.asset_group_work_id = attributes[:'AssetGroupWorkId']
      end

      if attributes.has_key?(:'AssetGroupId')
        self.asset_group_id = attributes[:'AssetGroupId']
      end

      if attributes.has_key?(:'AssetGroupWorkType')
        self.asset_group_work_type = attributes[:'AssetGroupWorkType']
      end

      if attributes.has_key?(:'Status')
        self.status = attributes[:'Status']
      end

      if attributes.has_key?(:'OrderId')
        self.order_id = attributes[:'OrderId']
      end

      if attributes.has_key?(:'TargetAccountId')
        self.target_account_id = attributes[:'TargetAccountId']
      end

      if attributes.has_key?(:'SourceAccountId')
        self.source_account_id = attributes[:'SourceAccountId']
      end

      if attributes.has_key?(:'SourceAccountExternalId')
        self.source_account_external_id = attributes[:'SourceAccountExternalId']
      end

      if attributes.has_key?(:'SourceAccountName')
        self.source_account_name = attributes[:'SourceAccountName']
      end

      if attributes.has_key?(:'SourceAccountSite')
        self.source_account_site = attributes[:'SourceAccountSite']
      end

      if attributes.has_key?(:'CloneRequestId')
        self.clone_request_id = attributes[:'CloneRequestId']
      end

      if attributes.has_key?(:'CloneAccountDetails')
        self.clone_account_details = attributes[:'CloneAccountDetails']
      end

      if attributes.has_key?(:'CreateSubAccountDetails')
        self.create_sub_account_details = attributes[:'CreateSubAccountDetails']
      end

      if attributes.has_key?(:'Attempts')
        self.attempts = attributes[:'Attempts']
      end

      if attributes.has_key?(:'RetryOn')
        self.retry_on = attributes[:'RetryOn']
      end

      if attributes.has_key?(:'Message')
        self.message = attributes[:'Message']
      end

      if attributes.has_key?(:'CreatedByName')
        self.created_by_name = attributes[:'CreatedByName']
      end

      if attributes.has_key?(:'CreatedByEmail')
        self.created_by_email = attributes[:'CreatedByEmail']
      end

      if attributes.has_key?(:'ErrorDetails')
        self.error_details = attributes[:'ErrorDetails']
      end

      if attributes.has_key?(:'OldAssetGroupSubscriptionId')
        self.old_asset_group_subscription_id = attributes[:'OldAssetGroupSubscriptionId']
      end

      if attributes.has_key?(:'NewAssetGroupSubscriptionId')
        self.new_asset_group_subscription_id = attributes[:'NewAssetGroupSubscriptionId']
      end

      if attributes.has_key?(:'SourceSystem')
        self.source_system = attributes[:'SourceSystem']
      end

      if attributes.has_key?(:'SourceId')
        self.source_id = attributes[:'SourceId']
      end

      if attributes.has_key?(:'CreatedBy')
        self.created_by = attributes[:'CreatedBy']
      end

      if attributes.has_key?(:'CreatedByType')
        self.created_by_type = attributes[:'CreatedByType']
      end

      if attributes.has_key?(:'CreatedDate')
        self.created_date = attributes[:'CreatedDate']
      end

      if attributes.has_key?(:'UpdatedBy')
        self.updated_by = attributes[:'UpdatedBy']
      end

      if attributes.has_key?(:'UpdatedByType')
        self.updated_by_type = attributes[:'UpdatedByType']
      end

      if attributes.has_key?(:'UpdatedDate')
        self.updated_date = attributes[:'UpdatedDate']
      end

      if attributes.has_key?(:'UpdateHistory')
        if (value = attributes[:'UpdateHistory']).is_a?(Array)
          self.update_history = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      asset_group_work_type_validator = EnumAttributeValidator.new('String', ['Undefined', 'GroupAssetFulfillment', 'AccountAssetFulfillment', 'AccountAssetClone', 'AccountAssetCreate', 'SubscriptionSync'])
      return false unless asset_group_work_type_validator.valid?(@asset_group_work_type)
      status_validator = EnumAttributeValidator.new('String', ['Undefined', 'Pending', 'Processing', 'ProcessingOnHold', 'PendingError', 'ProcessingError', 'Completed', 'Canceled', 'PermanentFailure'])
      return false unless status_validator.valid?(@status)
      created_by_type_validator = EnumAttributeValidator.new('Integer', ['0', '1', '2', '3', '4', '5'])
      return false unless created_by_type_validator.valid?(@created_by_type)
      updated_by_type_validator = EnumAttributeValidator.new('Integer', ['0', '1', '2', '3', '4', '5'])
      return false unless updated_by_type_validator.valid?(@updated_by_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_group_work_type Object to be assigned
    def asset_group_work_type=(asset_group_work_type)
      validator = EnumAttributeValidator.new('String', ['Undefined', 'GroupAssetFulfillment', 'AccountAssetFulfillment', 'AccountAssetClone', 'AccountAssetCreate', 'SubscriptionSync'])
      unless validator.valid?(asset_group_work_type)
        fail ArgumentError, 'invalid value for "asset_group_work_type", must be one of #{validator.allowable_values}.'
      end
      @asset_group_work_type = asset_group_work_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['Undefined', 'Pending', 'Processing', 'ProcessingOnHold', 'PendingError', 'ProcessingError', 'Completed', 'Canceled', 'PermanentFailure'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_by_type Object to be assigned
    def created_by_type=(created_by_type)
      validator = EnumAttributeValidator.new('Integer', ['0', '1', '2', '3', '4', '5'])
      unless validator.valid?(created_by_type)
        fail ArgumentError, 'invalid value for "created_by_type", must be one of #{validator.allowable_values}.'
      end
      @created_by_type = created_by_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] updated_by_type Object to be assigned
    def updated_by_type=(updated_by_type)
      validator = EnumAttributeValidator.new('Integer', ['0', '1', '2', '3', '4', '5'])
      unless validator.valid?(updated_by_type)
        fail ArgumentError, 'invalid value for "updated_by_type", must be one of #{validator.allowable_values}.'
      end
      @updated_by_type = updated_by_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asset_group_work_id == o.asset_group_work_id &&
          asset_group_id == o.asset_group_id &&
          asset_group_work_type == o.asset_group_work_type &&
          status == o.status &&
          order_id == o.order_id &&
          target_account_id == o.target_account_id &&
          source_account_id == o.source_account_id &&
          source_account_external_id == o.source_account_external_id &&
          source_account_name == o.source_account_name &&
          source_account_site == o.source_account_site &&
          clone_request_id == o.clone_request_id &&
          clone_account_details == o.clone_account_details &&
          create_sub_account_details == o.create_sub_account_details &&
          attempts == o.attempts &&
          retry_on == o.retry_on &&
          message == o.message &&
          created_by_name == o.created_by_name &&
          created_by_email == o.created_by_email &&
          error_details == o.error_details &&
          old_asset_group_subscription_id == o.old_asset_group_subscription_id &&
          new_asset_group_subscription_id == o.new_asset_group_subscription_id &&
          source_system == o.source_system &&
          source_id == o.source_id &&
          created_by == o.created_by &&
          created_by_type == o.created_by_type &&
          created_date == o.created_date &&
          updated_by == o.updated_by &&
          updated_by_type == o.updated_by_type &&
          updated_date == o.updated_date &&
          update_history == o.update_history
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [asset_group_work_id, asset_group_id, asset_group_work_type, status, order_id, target_account_id, source_account_id, source_account_external_id, source_account_name, source_account_site, clone_request_id, clone_account_details, create_sub_account_details, attempts, retry_on, message, created_by_name, created_by_email, error_details, old_asset_group_subscription_id, new_asset_group_subscription_id, source_system, source_id, created_by, created_by_type, created_date, updated_by, updated_by_type, updated_date, update_history].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_Admin.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
