=begin
#DocuSign Admin API

#An API for an organization administrator to manage organizations, accounts and users

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_Admin
  class OrganizationImportResponse
    attr_accessor :id

    attr_accessor :type

    attr_accessor :requestor

    attr_accessor :created

    attr_accessor :last_modified

    attr_accessor :status

    attr_accessor :user_count

    attr_accessor :processed_user_count

    attr_accessor :added_user_count

    attr_accessor :updated_user_count

    attr_accessor :closed_user_count

    attr_accessor :no_action_required_user_count

    attr_accessor :error_count

    attr_accessor :warning_count

    attr_accessor :invalid_column_headers

    attr_accessor :imports_not_found_or_not_available_for_accounts

    attr_accessor :imports_failed_for_accounts

    attr_accessor :imports_timed_out_for_accounts

    attr_accessor :imports_not_found_or_not_available_for_sites

    attr_accessor :imports_failed_for_sites

    attr_accessor :imports_timed_out_for_sites

    attr_accessor :file_level_error_rollups

    attr_accessor :user_level_error_rollups

    attr_accessor :user_level_warning_rollups

    attr_accessor :has_csv_results

    attr_accessor :results_uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'requestor' => :'requestor',
        :'created' => :'created',
        :'last_modified' => :'last_modified',
        :'status' => :'status',
        :'user_count' => :'user_count',
        :'processed_user_count' => :'processed_user_count',
        :'added_user_count' => :'added_user_count',
        :'updated_user_count' => :'updated_user_count',
        :'closed_user_count' => :'closed_user_count',
        :'no_action_required_user_count' => :'no_action_required_user_count',
        :'error_count' => :'error_count',
        :'warning_count' => :'warning_count',
        :'invalid_column_headers' => :'invalid_column_headers',
        :'imports_not_found_or_not_available_for_accounts' => :'imports_not_found_or_not_available_for_accounts',
        :'imports_failed_for_accounts' => :'imports_failed_for_accounts',
        :'imports_timed_out_for_accounts' => :'imports_timed_out_for_accounts',
        :'imports_not_found_or_not_available_for_sites' => :'imports_not_found_or_not_available_for_sites',
        :'imports_failed_for_sites' => :'imports_failed_for_sites',
        :'imports_timed_out_for_sites' => :'imports_timed_out_for_sites',
        :'file_level_error_rollups' => :'file_level_error_rollups',
        :'user_level_error_rollups' => :'user_level_error_rollups',
        :'user_level_warning_rollups' => :'user_level_warning_rollups',
        :'has_csv_results' => :'has_csv_results',
        :'results_uri' => :'results_uri'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'type' => :'String',
        :'requestor' => :'OrganizationImportResponseRequestor',
        :'created' => :'DateTime',
        :'last_modified' => :'DateTime',
        :'status' => :'String',
        :'user_count' => :'Integer',
        :'processed_user_count' => :'Integer',
        :'added_user_count' => :'Integer',
        :'updated_user_count' => :'Integer',
        :'closed_user_count' => :'Integer',
        :'no_action_required_user_count' => :'Integer',
        :'error_count' => :'Integer',
        :'warning_count' => :'Integer',
        :'invalid_column_headers' => :'String',
        :'imports_not_found_or_not_available_for_accounts' => :'String',
        :'imports_failed_for_accounts' => :'String',
        :'imports_timed_out_for_accounts' => :'String',
        :'imports_not_found_or_not_available_for_sites' => :'String',
        :'imports_failed_for_sites' => :'String',
        :'imports_timed_out_for_sites' => :'String',
        :'file_level_error_rollups' => :'Array<OrganizationImportResponseErrorRollup>',
        :'user_level_error_rollups' => :'Array<OrganizationImportResponseErrorRollup>',
        :'user_level_warning_rollups' => :'Array<OrganizationImportResponseWarningRollup>',
        :'has_csv_results' => :'BOOLEAN',
        :'results_uri' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'requestor')
        self.requestor = attributes[:'requestor']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'last_modified')
        self.last_modified = attributes[:'last_modified']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'user_count')
        self.user_count = attributes[:'user_count']
      end

      if attributes.has_key?(:'processed_user_count')
        self.processed_user_count = attributes[:'processed_user_count']
      end

      if attributes.has_key?(:'added_user_count')
        self.added_user_count = attributes[:'added_user_count']
      end

      if attributes.has_key?(:'updated_user_count')
        self.updated_user_count = attributes[:'updated_user_count']
      end

      if attributes.has_key?(:'closed_user_count')
        self.closed_user_count = attributes[:'closed_user_count']
      end

      if attributes.has_key?(:'no_action_required_user_count')
        self.no_action_required_user_count = attributes[:'no_action_required_user_count']
      end

      if attributes.has_key?(:'error_count')
        self.error_count = attributes[:'error_count']
      end

      if attributes.has_key?(:'warning_count')
        self.warning_count = attributes[:'warning_count']
      end

      if attributes.has_key?(:'invalid_column_headers')
        self.invalid_column_headers = attributes[:'invalid_column_headers']
      end

      if attributes.has_key?(:'imports_not_found_or_not_available_for_accounts')
        self.imports_not_found_or_not_available_for_accounts = attributes[:'imports_not_found_or_not_available_for_accounts']
      end

      if attributes.has_key?(:'imports_failed_for_accounts')
        self.imports_failed_for_accounts = attributes[:'imports_failed_for_accounts']
      end

      if attributes.has_key?(:'imports_timed_out_for_accounts')
        self.imports_timed_out_for_accounts = attributes[:'imports_timed_out_for_accounts']
      end

      if attributes.has_key?(:'imports_not_found_or_not_available_for_sites')
        self.imports_not_found_or_not_available_for_sites = attributes[:'imports_not_found_or_not_available_for_sites']
      end

      if attributes.has_key?(:'imports_failed_for_sites')
        self.imports_failed_for_sites = attributes[:'imports_failed_for_sites']
      end

      if attributes.has_key?(:'imports_timed_out_for_sites')
        self.imports_timed_out_for_sites = attributes[:'imports_timed_out_for_sites']
      end

      if attributes.has_key?(:'file_level_error_rollups')
        if (value = attributes[:'file_level_error_rollups']).is_a?(Array)
          self.file_level_error_rollups = value
        end
      end

      if attributes.has_key?(:'user_level_error_rollups')
        if (value = attributes[:'user_level_error_rollups']).is_a?(Array)
          self.user_level_error_rollups = value
        end
      end

      if attributes.has_key?(:'user_level_warning_rollups')
        if (value = attributes[:'user_level_warning_rollups']).is_a?(Array)
          self.user_level_warning_rollups = value
        end
      end

      if attributes.has_key?(:'has_csv_results')
        self.has_csv_results = attributes[:'has_csv_results']
      end

      if attributes.has_key?(:'results_uri')
        self.results_uri = attributes[:'results_uri']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          requestor == o.requestor &&
          created == o.created &&
          last_modified == o.last_modified &&
          status == o.status &&
          user_count == o.user_count &&
          processed_user_count == o.processed_user_count &&
          added_user_count == o.added_user_count &&
          updated_user_count == o.updated_user_count &&
          closed_user_count == o.closed_user_count &&
          no_action_required_user_count == o.no_action_required_user_count &&
          error_count == o.error_count &&
          warning_count == o.warning_count &&
          invalid_column_headers == o.invalid_column_headers &&
          imports_not_found_or_not_available_for_accounts == o.imports_not_found_or_not_available_for_accounts &&
          imports_failed_for_accounts == o.imports_failed_for_accounts &&
          imports_timed_out_for_accounts == o.imports_timed_out_for_accounts &&
          imports_not_found_or_not_available_for_sites == o.imports_not_found_or_not_available_for_sites &&
          imports_failed_for_sites == o.imports_failed_for_sites &&
          imports_timed_out_for_sites == o.imports_timed_out_for_sites &&
          file_level_error_rollups == o.file_level_error_rollups &&
          user_level_error_rollups == o.user_level_error_rollups &&
          user_level_warning_rollups == o.user_level_warning_rollups &&
          has_csv_results == o.has_csv_results &&
          results_uri == o.results_uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, type, requestor, created, last_modified, status, user_count, processed_user_count, added_user_count, updated_user_count, closed_user_count, no_action_required_user_count, error_count, warning_count, invalid_column_headers, imports_not_found_or_not_available_for_accounts, imports_failed_for_accounts, imports_timed_out_for_accounts, imports_not_found_or_not_available_for_sites, imports_failed_for_sites, imports_timed_out_for_sites, file_level_error_rollups, user_level_error_rollups, user_level_warning_rollups, has_csv_results, results_uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_Admin.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
